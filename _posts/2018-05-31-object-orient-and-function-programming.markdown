---
layout: post
title: "object-orient-and-function-programming."
date: 2018-05-31
categories:
  - Programming_Tech
description:
image: https://picsum.photos/2000/1200?image=1003
image-sm: https://picsum.photos/500/300?image=1003
---
이런 글을 많이 봤는데 전혀 그렇다고 생각 안하고요

실제로 함수형 프로그래밍의 대비 되는 것은 명령형 프로그래밍이고,
객체지향 프로그래밍과 대비 되는것은 절차 지향 프로그래밍입니다.

적절히 섞어 쓰는게 제일 좋다고 생각됩니다.


그런데 저런말이 나오는 이유는

객체지향 프로그래밍은 프로그램을 상호작용하는 객체들의 집합으로 볼 수 있지만, 함수형 프로그래밍은 상태값을 지니지 않는 함수값들의 연속이기 때문입니다.

객체지향 프로그래밍이란,
우리 실제 세계에 있는 것을 추상화해서 class로 만들어 우리들의 행동을 method로 만들어서 사용한 것입니다.

그래서 주 특징은  자료 추상화, 상속, 다형 개념, 동적 바인딩

자료 추상화

불필요한 정보는 숨기고 중요한 정보만을 표현함으로써 프로그램을 간단히 만드는 것
표현과 연산을 캡슐화해 접근 제어를 통해서 정보를 은닉하는 것이다.

상속

상속은 새로운 클래스가 기존의 클래스의 자료와 연산을 이용할 수 있게 하는 기능
상속을 통해서 기존의 클래스를 상속받은 하위 클래스를 이용해 프로그램의 요구에 맞추어 클래스를 수정할 수 있고 클래스 간의 종속 관계를 형성함으로써 객체를 조직화
다중 상속

다중 상속은 클래스가 2개 이상의 클래스로부터 상속받을 수 있게 하는 기능이다. 클래스들의 기능이 동시에 필요할 때 용이하나 클래스의 상속 관계에 혼란을 줄 수 있고(예: 다이아몬드 상속) 프로그래밍 언어에 따라 사용 가능 유무가 다르므로 주의해서 사용해야 한다.
다형성 


어떤 한 요소에 여러 개념을 넣어 놓는 것으로 일반적으로 오버라이딩(같은 이름의 메소드가 여러 클래스에서 다른 기능을 하는 것)이나 오버로딩(같은 이름의 메소드가 인자의 갯수나 자료형에 따라서 다른 기능을 하는 것)을 의미한다. 다형 개념을 통해서 프로그램 안의 객체 간의 관계를 조직적으로 나타낼 수 있다.
동적 바인딩

동적 바인딩은 실행 시간 중에 일어나거나 실행 과정에서 변경될 수 있는 바인딩으로 컴파일 시간에 완료되어 변화하지 않는 정적 바인딩과 대비되는 개념이다. 동적 바인딩은 프로그램의 한 개체나 기호를 실행 과정에 여러 속성이나 연산에 바인딩함으로써 다형 개념을 실현한다.

동적으로 값을 바꾸거나 넣는 것이 동적 바인딩


큰 장점:
S/W의 질을 향상하기 위해 강한 응집력(Strong Cohesion)과 약한 결합력(Weak Coupling)을 지향해야 하는데, OOP의 경우 클래스에 하나의 문제 해결을 위한 데이터를 모아 놓은 데이터형을 사용함으로써 응집력을 강화하고, 클래스간에 독립적으로 디자인함으로써 결합력을 약하게 할 수 있다.



함수형 프로그래밍

자료 처리를 수학적 함수의 계산으로 취급하고 상태와 가변 데이터를 멀리하는 프로그래밍 패러다임의 하나이다. 




쉽게 말해 one-to-one Correspondence했으면 하는게 함수형 프로그래밍이다.

함수형 프로그램과 상반 대는 개념이 명령형 프로그래밍인데 같은 input값에도 다른 output값이 나오는 그런 프로그래밍 이다.




이런 미친 일...
가장 쉽게 일어날 수 있는 법(?)은 함수 안에 random함수를 넣으면 일어난다. 



여기에는 세가지 함수를 쓰는게 목표인데 
바로
1. 
순수한 함수[편집]

즉, 함수의 실행이 외부에 영향을 끼치지 않는 함수를 뜻한다. 따라서 순수한 함수는 스레드 안전하고, 병렬적인 계산이 가능

2.
익명 함수



3.
고계 함수[편집]

함수를 다루는 함수를 뜻한다. 사실 함수형 언어에서는 함수도 '값(value)'으로 취급


Map, filter,reduce 같은 것


함수형 프로그래밍은 자료 처리를 수학적 함수의 계산으로 취급하고 상태와 가변적인 데이터를 배제하는 프로그래밍 기법
